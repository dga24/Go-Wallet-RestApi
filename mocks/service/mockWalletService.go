// Code generated by MockGen. DO NOT EDIT.
// Source: bluelabs/service (interfaces: WalletService)

// Package service is a generated GoMock package.
package service

import (
	dto "bluelabs/dto"
	errs "bluelabs/errs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletService is a mock of WalletService interface.
type MockWalletService struct {
	ctrl     *gomock.Controller
	recorder *MockWalletServiceMockRecorder
}

// MockWalletServiceMockRecorder is the mock recorder for MockWalletService.
type MockWalletServiceMockRecorder struct {
	mock *MockWalletService
}

// NewMockWalletService creates a new mock instance.
func NewMockWalletService(ctrl *gomock.Controller) *MockWalletService {
	mock := &MockWalletService{ctrl: ctrl}
	mock.recorder = &MockWalletServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletService) EXPECT() *MockWalletServiceMockRecorder {
	return m.recorder
}

// DoTransaction mocks base method.
func (m *MockWalletService) DoTransaction(arg0 dto.TransactionRequest) (*dto.TransactionResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoTransaction", arg0)
	ret0, _ := ret[0].(*dto.TransactionResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DoTransaction indicates an expected call of DoTransaction.
func (mr *MockWalletServiceMockRecorder) DoTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoTransaction", reflect.TypeOf((*MockWalletService)(nil).DoTransaction), arg0)
}

// FindWallet mocks base method.
func (m *MockWalletService) FindWallet(arg0 string) (*dto.GetWalletResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWallet", arg0)
	ret0, _ := ret[0].(*dto.GetWalletResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindWallet indicates an expected call of FindWallet.
func (mr *MockWalletServiceMockRecorder) FindWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWallet", reflect.TypeOf((*MockWalletService)(nil).FindWallet), arg0)
}

// NewWallet mocks base method.
func (m *MockWalletService) NewWallet(arg0 dto.NewWalletRequest) (*dto.NewWalletResponse, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWallet", arg0)
	ret0, _ := ret[0].(*dto.NewWalletResponse)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// NewWallet indicates an expected call of NewWallet.
func (mr *MockWalletServiceMockRecorder) NewWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWallet", reflect.TypeOf((*MockWalletService)(nil).NewWallet), arg0)
}
